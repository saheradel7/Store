//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Store
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;

    public partial class product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
        public System.DateTime Received_Date { get; set; }
        public decimal Total { get; set; }
        public int Received_Quantity { get; set; }
        public int Quantity_Sold { get; set; }
        public bool IsSold { get; set; }

        StoreDataBaseEntities context = new StoreDataBaseEntities();


        public DataTable Select()
        {
            DataTable dt = new DataTable();

            // Assuming that you have a DbSet named "products" in your StoreDataBaseEntities
            var products = context.products.Where(p => p.IsSold == false).ToList();

            // Create the structure of the DataTable based on the entity's properties
            dt.Columns.Add("Id", typeof(int));
            dt.Columns.Add("Name", typeof(string));
            dt.Columns.Add("Price", typeof(decimal));
            dt.Columns.Add("Received_Quantity", typeof(int));
            dt.Columns.Add("Quantity_Sold", typeof(int));
            dt.Columns.Add("Quantity", typeof(int));
            dt.Columns.Add("Total", typeof(decimal));
            dt.Columns.Add("Received_Date", typeof(DateTime));
            dt.Columns.Add("IsSold", typeof(bool));

            // Populate the DataTable with data from the entity
            foreach (var product in products)
            {
                dt.Rows.Add(product.Id, product.Name, product.Price, product.Received_Quantity, product.Quantity_Sold, product.Quantity,product.Total,   product.Received_Date,  product.IsSold);
            }

            return dt;
        }

        public bool SellProduct(product p)
        {
            bool IsSuccess = false;

            // Assuming that you have a DbSet named "products" in your StoreDataBaseEntities
            var product = context.products.Find(p.Id);

            if (product != null)
            {
                // Check if there's enough quantity to sell
                if (product.Quantity >= p.Quantity)
                {
                    product.Quantity -= p.Quantity;
                    product.Total -= p.Total;
                    product.Quantity = p.Quantity;
                    product.Quantity_Sold += p.Quantity_Sold; 
                    product.IsSold = product.Quantity <= 0;
                    context.SaveChanges();
                    IsSuccess = true;
                }
            }

            return IsSuccess;
        }

        public bool Insert(product p)
        {
            bool isSuccess = false;

            try
            {
                using (var context = new StoreDataBaseEntities())
                {
                    var newProduct = new product
                    {
                        Name = p.Name,
                        Price = p.Price,
                        Quantity = p.Quantity,
                        Received_Date = p.Received_Date,
                        Total = p.Total,
                        Received_Quantity = p.Received_Quantity,
                        IsSold = p.IsSold
                    };

                    context.products.Add(newProduct);
                    int rows = context.SaveChanges();
                    isSuccess = rows > 0;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error in Insert method: " + ex.Message);
            }

            return isSuccess;
        }

        public decimal CalculateTotalStorePrice()
        {
            decimal totalStorePrice = 0;
            try
            {
                using (var context = new StoreDataBaseEntities())
                {
                    var productPrices = context.products.Select(p => new
                    {
                        Price = p.Price,
                        Quantity = p.Quantity
                    }).ToList();

                    foreach (var product in productPrices)
                    {
                        totalStorePrice += product.Price * product.Quantity;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error in CalculateTotalStorePrice method: " + ex.Message);
            }
            return totalStorePrice;
        }

        public bool Delete(product p)
        {
            bool IsSuccess = false;
            var product = context.products.Find(p.Id);
            if (product != null)
            {
               
                product.Quantity -= p.Quantity;
                product.Total -= p.Total;
                product.Received_Quantity = p.Received_Quantity;
                product.IsSold = product.Quantity <= 0;
                if (product.Quantity >= product.Received_Quantity)
                {
                    context.products.Remove(product);
                }

                context.SaveChanges();
               IsSuccess = true;
            }
            return IsSuccess;

        }

        public void DeleteRowByIdIfResQuantityIsZeroOrNegative(int id)
        {
            using (var context = new StoreDataBaseEntities())
            {
                try
                {
                    var product = context.products.SingleOrDefault(p => p.Id == id && p.Received_Quantity <= 0);
                    if (product != null)
                    {
                        context.products.Remove(product);
                        context.SaveChanges();
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error in DeleteRowByIdIfResQuantityIsZeroOrNegative method: " + ex.Message);
                }
            }
        }

        public DataTable FilterProductDataByMonthYear(int mm, int yy)
        {
            DataTable dt = new DataTable();

            // Define the columns for your DataTable
            dt.Columns.Add("Id", typeof(int));
            dt.Columns.Add("Name", typeof(string));
            dt.Columns.Add("Price", typeof(decimal)); // Add other columns
            dt.Columns.Add("Quantity", typeof(int));
            dt.Columns.Add("Received_Date", typeof(DateTime));
            dt.Columns.Add("Total", typeof(decimal));
            dt.Columns.Add("Received_Quantity", typeof(int));
            dt.Columns.Add("IsSold", typeof(bool));

            try
            {
                using (var context = new StoreDataBaseEntities())
                {
                    var filteredProducts = context.products
                        .Where(p => p.Received_Date.Month == mm && p.Received_Date.Year == yy)
                        .ToList();

                    // Fill the DataTable with the filtered products
                    foreach (var product in filteredProducts)
                    {
                        DataRow row = dt.NewRow();
                        row["Id"] = product.Id;
                        row["Name"] = product.Name;
                        row["Price"] = product.Price; // Add other properties
                        row["Quantity"] = product.Quantity;
                        row["Received_Date"] = product.Received_Date;
                        row["Total"] = product.Total;
                        row["Received_Quantity"] = product.Received_Quantity;
                        row["IsSold"] = product.IsSold;

                        dt.Rows.Add(row);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error in FilterProductDataByMonthYear method: " + ex.Message);
            }

            return dt;
        }

        public DataTable FilterProductDataByMonthYearOrderByName(int mm, int yy)
        {
            DataTable dt = new DataTable();

            // Define the columns for your DataTable
            dt.Columns.Add("Id", typeof(int));
            dt.Columns.Add("Name", typeof(string));
            dt.Columns.Add("Price", typeof(decimal)); // Add other columns
            dt.Columns.Add("Quantity", typeof(int));
            dt.Columns.Add("Received_Date", typeof(DateTime));
            dt.Columns.Add("Total", typeof(decimal));
            dt.Columns.Add("Received_Quantity", typeof(int));
            dt.Columns.Add("IsSold", typeof(bool));

            try
            {
                using (var context = new StoreDataBaseEntities())
                {
                    var filteredProducts = context.products
                        .Where(p => p.Received_Date.Month == mm && p.Received_Date.Year == yy)
                        .OrderBy(p => p.Name)
                        .ToList();

                    // Fill the DataTable with the filtered products
                    foreach (var product in filteredProducts)
                    {
                        DataRow row = dt.NewRow();
                        row["Id"] = product.Id;
                        row["Name"] = product.Name;
                        row["Price"] = product.Price; // Add other properties
                        row["Quantity"] = product.Quantity;
                        row["Received_Date"] = product.Received_Date;
                        row["Total"] = product.Total;
                        row["Received_Quantity"] = product.Received_Quantity;
                        row["IsSold"] = product.IsSold;

                        dt.Rows.Add(row);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error in FilterProductDataByMonthYearOrderByName method: " + ex.Message);
            }

            return dt;
        }

        public decimal CalculateTotalProductPriceByMonthYear(int mm, int yy)
        {
            decimal totalProductPrice = 0;

            try
            {
                using (var context = new StoreDataBaseEntities())
                {
                    totalProductPrice = context.products
                        .Where(p => p.Received_Date.Month == mm && p.Received_Date.Year == yy)
                        .Sum(p => p.Total);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error in CalculateTotalPriceByMonthYear method: " + ex.Message);
            }

            return totalProductPrice;
        }








    }
}
